{"version":3,"sources":["Networker.ts","TVStationView.tsx","TVStationEditorView.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["api","window","location","host","TVStationDao","fetch","method","resp","json","tvStations","s","assembleParams","id","tvStationIds","iid","encodeURIComponent","m3u8","title","sort","TVStationView","moveButtonClick","key","this","props","station","onClick","onItemClick","style","wordWrap","maxWidth","ButtonGroup","Button","disabled","moveUpEnabled","variant","onMoveClick","moveDownEnabled","PureComponent","TVStationEditorView","state","isSaving","isDeleting","inputTitle","inputM3u8","Modal","show","editingStation","onHide","onShow","setState","titleInvalid","m3u8Invalid","animation","Header","closeButton","Title","Body","Form","Label","Group","Control","required","value","onChange","e","target","type","isInvalid","placeholder","Feedback","Footer","hidden","delete","Spinner","as","size","role","aria-hidden","flex","save","insertOrUpdate","then","Component","App","maxSort","refresh","Navbar","bg","expand","sticky","Container","Brand","fluid","marginTop","marginBottom","Table","striped","bordered","hover","map","index","isMoveUp","move","length","display","flexDirection","alignItems","width","refreshRequired","getAll","stations","last","isUp","currentStations","currentIndex","indexOf","targetIndex","splice","forEach","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uUAAMA,EAAM,UAAYC,OAAOC,SAASC,KAAO,aAElCC,EAAb,sOAE2BC,MAAML,EAAK,CAAEM,OAAQ,QAFhD,cAEcC,EAFd,gBAGqBA,EAAKC,OAH1B,qUAMmCC,EANnC,yBAMmCA,EANnC,cAOwBA,EAPxB,+CAOmBC,EAPnB,cAQkBL,MAAML,EAAMW,EAAeD,GAAI,CAAEJ,OAAQI,EAAEE,GAAK,MAAQ,SAR1E,+SAY2BC,EAZ3B,yBAY2BA,EAZ3B,cAa0BA,EAb1B,+CAamBC,EAbnB,cAckBT,MAAML,EAAG,uBAAmBc,GAAO,CAAER,OAAQ,WAd/D,kIA0BA,SAASK,EAAeD,GACpB,MAAM,gBAAN,OAAuBK,mBAAmBL,EAAEE,IAA5C,iBAAwDG,mBAAmBL,EAAEM,MAA7E,kBAA4FD,mBAAmBL,EAAEO,OAAjH,iBAAgIF,mBAAmBL,EAAEQ,O,YCzBpIC,E,4MAQTC,iBAAkB,E,uDACL,IAAD,OAChB,OACI,wBAAIC,IAAKC,KAAKC,MAAMC,QAAQZ,GACxBa,QAAS,WACL,EAAKL,iBAAmB,EAAKG,MAAMG,cACnC,EAAKN,iBAAkB,IAE3B,4BAAKE,KAAKC,MAAMC,QAAQZ,IACxB,4BAAKU,KAAKC,MAAMC,QAAQP,OACxB,4BAAI,uBAAGU,MAAO,CAAEC,SAAU,aAAcC,SAAU,MAE1CP,KAAKC,MAAMC,QAAQR,OAG3B,4BACI,kBAACc,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,UAAWV,KAAKC,MAAMU,cACtBC,QAAQ,kBACRT,QAAS,WACL,EAAKL,iBAAkB,EACvB,EAAKG,MAAMY,aAAY,KAL/B,UASA,kBAACJ,EAAA,EAAD,CACIC,UAAWV,KAAKC,MAAMa,gBACtBF,QAAQ,kBACRT,QAAS,WACL,EAAKL,iBAAkB,EACvB,EAAKG,MAAMY,aAAY,KAL/B,iB,GAlCmBE,iB,gBCAtBC,E,4MAKjBC,MAAQ,CACJC,UAAU,EACVC,YAAY,EACZC,WAAY,GACZC,UAAW,I,uDAGM,IAAD,SAChB,OACI,kBAACC,EAAA,EAAD,CACIC,OAAQvB,KAAKC,MAAMuB,eACnBC,OAAQ,kBAAM,EAAKxB,MAAMwB,QAAO,IAChCC,OAAQ,0BAAM,EAAKC,SAAS,CACxBC,cAAc,EACdC,aAAa,EACbX,UAAU,EACVC,YAAY,EACZC,YAAY,YAAKnB,MAAMuB,sBAAX,eAA2B7B,QAAS,GAChD0B,WAAW,YAAKpB,MAAMuB,sBAAX,eAA2B9B,OAAQ,MAElDoC,WAAW,GACX,kBAACR,EAAA,EAAMS,OAAP,CAAcC,aAAW,GACrB,kBAACV,EAAA,EAAMW,MAAP,yBAEJ,kBAACX,EAAA,EAAMY,KAAP,KACI,kBAACC,EAAA,EAAKC,MAAN,+BACA,kBAACD,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,QAAN,CACIC,UAAQ,EACRC,MAAOxC,KAAKiB,MAAMG,WAClBqB,SAAU,SAACC,GAAD,OAAO,EAAKf,SAAS,CAAEP,WAAYsB,EAAEC,OAAOH,SACtDI,KAAM,OACNC,WAAY7C,KAAKiB,MAAMG,WACvB0B,YAAY,UAChB,kBAACX,EAAA,EAAKG,QAAQS,SAAd,CAAuBH,KAAK,WAA5B,kCAIJ,kBAACT,EAAA,EAAKE,MAAN,KACI,kBAACF,EAAA,EAAKG,QAAN,CACIC,UAAQ,EACRC,MAAOxC,KAAKiB,MAAMI,UAClBoB,SAAU,SAACC,GAAD,OAAO,EAAKf,SAAS,CAAEN,UAAWqB,EAAEC,OAAOH,SACrDI,KAAM,OACNC,WAAY7C,KAAKiB,MAAMI,UACvByB,YAAY,aAChB,kBAACX,EAAA,EAAKG,QAAQS,SAAd,CAAuBH,KAAK,WAA5B,sCAKR,kBAACtB,EAAA,EAAM0B,OAAP,KACI,kBAACvC,EAAA,EAAD,CACIwC,SAAQ,UAACjD,KAAKC,MAAMuB,sBAAZ,aAAC,EAA2BlC,IACpCsB,QAAQ,SACRT,QAAS,kBAAM,EAAK+C,WAEhBlD,KAAKiB,MAAME,WACL,kBAACgC,EAAA,EAAD,CACEC,GAAG,OACHtB,UAAU,SACVuB,KAAK,KACLC,KAAK,SACLC,cAAY,SAEd,UAGd,yBAAKlD,MAAO,CAAEmD,KAAM,KACpB,kBAAC/C,EAAA,EAAD,CAAQG,QAAQ,YAAYT,QAAS,kBAAM,EAAKF,MAAMwB,QAAO,KAA7D,SACA,kBAAChB,EAAA,EAAD,CAAQG,QAAQ,UAAUT,QAAS,kBAAM,EAAKsD,SAEtCzD,KAAKiB,MAAMC,SACL,kBAACiC,EAAA,EAAD,CACEC,GAAG,OACHtB,UAAU,SACVuB,KAAK,KACLC,KAAK,SACLC,cAAY,SAEd,oB,6BAQtB,IAC+C,IADhD,OACCvD,KAAKiB,MAAMG,YAAcpB,KAAKiB,MAAMI,YACpCrB,KAAK2B,SAAS,CAAET,UAAU,IAC1BpC,EAAa4E,eAAe,CACxBpE,IAAI,UAAAU,KAAKC,MAAMuB,sBAAX,eAA2BlC,KAAM,EACrCI,KAAMM,KAAKiB,MAAMI,UACjB1B,MAAOK,KAAKiB,MAAMG,WAClBxB,MAAM,UAAAI,KAAKC,MAAMuB,sBAAX,eAA2B5B,OAAQ,IAC1C+D,MAAK,kBAAM,EAAK1D,MAAMwB,QAAO,S,+BAI9B,IAAD,OACAzB,KAAKC,MAAMuB,gBAGXxB,KAAKC,MAAMuB,eAAgBlC,KAGhCU,KAAK2B,SAAS,CAAER,YAAY,IAC5BrC,EAAaoE,OAAOlD,KAAKC,MAAMuB,eAAgBlC,IAAIqE,MAAK,kBAAM,EAAK1D,MAAMwB,QAAO,W,GAjHvCmC,aCE5BC,E,4MAEnB5C,MAAQ,CACN9B,WAAY,KACZqC,eAAgB,M,EAGVsC,QAAU,E,kEAGhB9D,KAAK+D,Y,+BAGc,IAAD,OACZ5E,EAAiCa,KAAKiB,MAAM9B,WAClD,OACE,6BACE,kBAAC6E,EAAA,EAAD,CAAQC,GAAG,OAAOrD,QAAQ,OAAOsD,OAAO,KAAKC,OAAO,OAClD,kBAACC,EAAA,EAAD,KACE,kBAACJ,EAAA,EAAOK,MAAR,uBAGJ,kBAACD,EAAA,EAAD,CAAWE,OAAK,EAACjE,MAAO,CAAEkE,UAAW,GAAIC,aAAc,KACrD,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAAChE,QAAQ,QACpC,+BACE,4BACE,iCACA,qCACA,oCACA,sCAGJ,gCAEKzB,GAAc,IAAI0F,KAAI,SAAC3E,EAAoB4E,GAArB,OACrB,kBAAC,EAAD,CACE/E,IAAKG,EAAQZ,GACbY,QAASA,EACTE,YAAa,kBAAM,EAAKuB,SAAS,CAAEH,eAAgBtB,KACnDW,YAAa,SAACkE,GAAD,OAAuB,EAAKC,KAAK9E,EAAS6E,IACvDpE,cAAyB,IAAVmE,EACfhE,gBAAiBgE,IAAU3F,EAAY8F,OAAS,SAK1D,yBAAK5E,MAAO,CAAE6E,QAAS,OAAQC,cAAe,SAAUC,WAAY,WAElD,MAAdjG,EACI,yBAAKkB,MAAO,CAAE6E,QAAS,OAAQC,cAAe,SAAUC,WAAY,WACpE,2BAAIjG,EAAY8F,OAAhB,eACA,kBAACxE,EAAA,EAAD,CACEJ,MAAO,CAAEgF,MAAO,KAChBzE,QAAQ,UACRT,QAAS,kBAAM,EAAKwB,SAAS,CAC3BH,eAAgB,CACdlC,GAAI,EACJI,KAAM,GACNE,KAAM,EAAKkE,QAAU,EACrBnE,MAAO,QARb,mBAcA,yBAAKU,MAAO,CAAE6E,QAAS,OAAQC,cAAe,SAAUC,WAAY,WACpE,kBAACjC,EAAA,EAAD,CAASF,OAAsB,MAAd9D,EAAoB2C,UAAU,OAAOlB,QAAQ,YAC9D,wDAKV,kBAAC,EAAD,CACEY,eAAgBxB,KAAKiB,MAAMO,eAC3BC,OAAQ,SAAC6D,GACP,EAAK3D,SAAS,CAAEH,eAAgB,OAChC8D,GAAmB,EAAKvB,gB,gCAOvB,IAAD,OACRjF,EAAayG,SAAS5B,MAAK,SAAC6B,GAC1B,EAAK7D,SAAS,CAAExC,WAAYqG,IAC5B,IAAMC,EAAOD,EAASA,EAASP,OAAS,GACxC,EAAKnB,QAAU2B,EAAOA,EAAK7F,KAAO,O,2BAIjCM,EAAoBwF,GAAgB,IAAD,OAChCC,EAA4B,YAAQ3F,KAAKiB,MAAM9B,YAAc,IACnE,GAAKwG,EAAgBV,OAArB,CAGA,IAAMW,EAAeD,EAAgBE,QAAQ3F,GACvC4F,EAAcF,GAAgBF,GAAQ,EAAI,GAEhDC,EAAgBI,OAAOH,EAAc,GACrCD,EAAgBI,OAAOD,EAAa,EAAG5F,GACvCyF,EAAgBK,SAAQ,SAAC5G,EAAG0F,GAAJ,OAAc1F,EAAEQ,KAAOkF,KAC/ChG,EAAa4E,eAAb,MAAA5E,EAAY,YAAmB6G,IAAiBhC,MAAK,WACnD,EAAKhC,SAAS,CAAExC,WAAYwG,Y,GAvGD/B,aCMbqC,QACW,cAA7BtH,OAAOC,SAASsH,UAEe,UAA7BvH,OAAOC,SAASsH,UAEhBvH,OAAOC,SAASsH,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDgIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhD,MAAK,SAAAiD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7ac0e165.chunk.js","sourcesContent":["const api = \"http://\" + window.location.host + \"/tvStation\";\n\nexport class TVStationDao {\n    static async getAll(): Promise<TVStation[]> {\n        const resp = await fetch(api, { method: \"GET\" });\n        return await resp.json();\n    }\n\n    static async insertOrUpdate(...tvStations: TVStation[]) {\n        for (const s of tvStations) {\n            await fetch(api + assembleParams(s), { method: s.id ? \"PUT\" : \"POST\" });\n        }\n    }\n\n    static async delete(...tvStationIds: number[]) {\n        for (const iid of tvStationIds) {\n            await fetch(api + `?tvStationId=${iid}`, { method: \"DELETE\" });\n        }\n    }\n}\n\nexport type TVStation = {\n    id: number,\n    m3u8: string,\n    sort: number,\n    title: string,\n}\n\nfunction assembleParams(s: TVStation): string {\n    return `?tvStationId=${encodeURIComponent(s.id)}&m3u8=${encodeURIComponent(s.m3u8)}&title=${encodeURIComponent(s.title)}&sort=${encodeURIComponent(s.sort)}`;\n}","import React, { PureComponent, ReactNode } from \"react\";\nimport { TVStation } from \"./Networker\"\nimport { Button, ButtonGroup } from \"react-bootstrap\";\n\nexport default class TVStationView extends PureComponent<{\n    station: TVStation,\n    onItemClick: () => void,\n    onMoveClick: (isMoveUp: boolean) => void,\n    moveUpEnabled: boolean,\n    moveDownEnabled: boolean,\n}> {\n\n    private moveButtonClick = false;\n    render(): ReactNode {\n        return (\n            <tr key={this.props.station.id}\n                onClick={() => {\n                    this.moveButtonClick || this.props.onItemClick();\n                    this.moveButtonClick = false;\n                }}>\n                <td>{this.props.station.id}</td>\n                <td>{this.props.station.title}</td>\n                <td><p style={{ wordWrap: \"break-word\", maxWidth: 600 }}>\n                    {\n                        this.props.station.m3u8\n                    }\n                </p></td>\n                <td>\n                    <ButtonGroup>\n                        <Button\n                            disabled={!this.props.moveUpEnabled}\n                            variant=\"outline-primary\"\n                            onClick={() => {\n                                this.moveButtonClick = true;\n                                this.props.onMoveClick(true);\n                            }}>\n                            ↑\n                             </Button>\n                        <Button\n                            disabled={!this.props.moveDownEnabled}\n                            variant=\"outline-primary\"\n                            onClick={() => {\n                                this.moveButtonClick = true;\n                                this.props.onMoveClick(false);\n                            }}>\n                            ↓\n                             </Button>\n                    </ButtonGroup>\n                </td>\n            </tr>\n        );\n    }\n}","import React, { Component, ReactNode } from \"react\";\nimport { Modal, Button, Form, Spinner } from \"react-bootstrap\";\nimport { TVStation, TVStationDao } from \"./Networker\";\n\nexport default class TVStationEditorView extends Component<{\n    editingStation: TVStation | null,\n    onHide: (refreshRequired: boolean) => void,\n}> {\n\n    state = {\n        isSaving: false,\n        isDeleting: false,\n        inputTitle: \"\",\n        inputM3u8: \"\",\n    }\n\n    render(): ReactNode {\n        return (\n            <Modal\n                show={!!this.props.editingStation}\n                onHide={() => this.props.onHide(false)}\n                onShow={() => this.setState({\n                    titleInvalid: false,\n                    m3u8Invalid: false,\n                    isSaving: false,\n                    isDeleting: false,\n                    inputTitle: this.props.editingStation?.title || \"\",\n                    inputM3u8: this.props.editingStation?.m3u8 || \"\",\n                })}\n                animation={false}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Edit TV Station</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <Form.Label>TV Station basic info.</Form.Label>\n                    <Form.Group>\n                        <Form.Control\n                            required\n                            value={this.state.inputTitle}\n                            onChange={(e) => this.setState({ inputTitle: e.target.value })}\n                            type={\"text\"}\n                            isInvalid={!this.state.inputTitle}\n                            placeholder=\"Title\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid title.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Control\n                            required\n                            value={this.state.inputM3u8}\n                            onChange={(e) => this.setState({ inputM3u8: e.target.value })}\n                            type={\"text\"}\n                            isInvalid={!this.state.inputM3u8}\n                            placeholder=\"M3U8 URL\" />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid m3u8 url.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button\n                        hidden={!this.props.editingStation?.id}\n                        variant=\"danger\"\n                        onClick={() => this.delete()}>\n                        {\n                            this.state.isDeleting\n                                ? <Spinner\n                                    as=\"span\"\n                                    animation=\"border\"\n                                    size=\"sm\"\n                                    role=\"status\"\n                                    aria-hidden=\"true\"\n                                />\n                                : \"Delete\"\n                        }\n                    </Button>\n                    <div style={{ flex: 1 }} />\n                    <Button variant=\"secondary\" onClick={() => this.props.onHide(false)}>Close</Button>\n                    <Button variant=\"primary\" onClick={() => this.save()}>\n                        {\n                            this.state.isSaving\n                                ? <Spinner\n                                    as=\"span\"\n                                    animation=\"border\"\n                                    size=\"sm\"\n                                    role=\"status\"\n                                    aria-hidden=\"true\"\n                                />\n                                : \"Save changes\"\n                        }\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n\n    save() {\n        if (this.state.inputTitle && this.state.inputM3u8) {\n            this.setState({ isSaving: true });\n            TVStationDao.insertOrUpdate({\n                id: this.props.editingStation?.id || 0,\n                m3u8: this.state.inputM3u8,\n                title: this.state.inputTitle,\n                sort: this.props.editingStation?.sort || 0,\n            }).then(() => this.props.onHide(true));\n        }\n    }\n\n    delete() {\n        if (!this.props.editingStation) {\n            return;\n        }\n        if (!this.props.editingStation!.id) {\n            return;\n        }\n        this.setState({ isDeleting: true });\n        TVStationDao.delete(this.props.editingStation!.id).then(() => this.props.onHide(true));\n    }\n}","import React, { Component, ReactNode } from 'react';\nimport { Container, Navbar, Table, Spinner, Button } from 'react-bootstrap';\nimport { TVStationDao, TVStation } from './Networker'\nimport TVStationView from './TVStationView';\nimport TVStationEditorView from './TVStationEditorView';\n\nexport default class App extends Component {\n\n  state = {\n    tvStations: null,\n    editingStation: null,\n  }\n\n  private maxSort = 0;\n\n  componentDidMount() {\n    this.refresh();\n  }\n\n  render(): ReactNode {\n    const tvStations: TVStation[] | null = this.state.tvStations;\n    return (\n      <div>\n        <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\" sticky=\"top\">\n          <Container>\n            <Navbar.Brand>Beryllium TV</Navbar.Brand>\n          </Container>\n        </Navbar>\n        <Container fluid style={{ marginTop: 44, marginBottom: 44 }}>\n          <Table striped bordered hover variant=\"dark\">\n            <thead>\n              <tr>\n                <th>#</th>\n                <th>Title</th>\n                <th>m3u8</th>\n                <th>Sort</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                (tvStations || []).map((station: TVStation, index: number) =>\n                  <TVStationView\n                    key={station.id}\n                    station={station}\n                    onItemClick={() => this.setState({ editingStation: station })}\n                    onMoveClick={(isMoveUp: boolean) => this.move(station, isMoveUp)}\n                    moveUpEnabled={index !== 0}\n                    moveDownEnabled={index !== tvStations!.length - 1} />\n                )\n              }\n            </tbody>\n          </Table>\n          <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n            {\n              tvStations != null\n                ? <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                  <p>{tvStations!.length} station(s)</p>\n                  <Button\n                    style={{ width: 240 }}\n                    variant=\"primary\"\n                    onClick={() => this.setState({\n                      editingStation: {\n                        id: 0,\n                        m3u8: \"\",\n                        sort: this.maxSort + 1,\n                        title: \"\",\n                      }\n                    })}>\n                    Add TV Station\n                      </Button>\n                </div>\n                : <div style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}>\n                  <Spinner hidden={tvStations != null} animation=\"grow\" variant=\"primary\" />\n                  <p>Loading saved stations</p>\n                </div>\n            }\n          </div>\n        </Container>\n        <TVStationEditorView\n          editingStation={this.state.editingStation}\n          onHide={(refreshRequired) => {\n            this.setState({ editingStation: null });\n            refreshRequired && this.refresh();\n          }}\n        />\n      </div>\n    );\n  }\n\n  refresh() {\n    TVStationDao.getAll().then((stations) => {\n      this.setState({ tvStations: stations });\n      const last = stations[stations.length - 1];\n      this.maxSort = last ? last.sort : 0;\n    });\n  }\n\n  move(station: TVStation, isUp: boolean) {\n    const currentStations: TVStation[] = [...(this.state.tvStations || [])];\n    if (!currentStations.length) {\n      return\n    }\n    const currentIndex = currentStations.indexOf(station);\n    const targetIndex = currentIndex + (isUp ? -1 : 1);\n\n    currentStations.splice(currentIndex, 1);\n    currentStations.splice(targetIndex, 0, station);\n    currentStations.forEach((s, index) => s.sort = index);\n    TVStationDao.insertOrUpdate(...currentStations).then(() => {\n      this.setState({ tvStations: currentStations });\n    })\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}